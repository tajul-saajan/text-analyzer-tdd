name: CI - Docker Compose Test

on:
  push: 
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: creates env file
        run: |
            echo "NODE_ENV=development" >> .env
            echo "PORT=5050" >> .env
            echo "EXPOSE_PORT=5050" >> .env
            echo "CREDENTIALS=true" >> .env
            echo "DB_HOST=mysql" >> .env
            echo "DB_EXPOSE_PORT=3308" >> .env
            echo "DB_PORT=3306" >> .env
            echo "DB_DATABASE=text_analyzer" >> .env
            echo "DB_USERNAME=tajul" >> .env
            echo "DB_PASSWORD=dummy_pass" >> .env
            echo "MYSQL_ROOT_PASSWORD=root" >> .env
            echo "SECRET_KEY=\"jgksdlkfgldf\"" >> .env
            echo "REDIS_HOST=redis" >> .env
            echo "REDIS_PORT=6379" >> .env
            echo "REDIS_EXPOSE_PORT=6389" >> .env

      - name: Set up Docker Compose
        run: |
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          chmod +x ./.github/scripts/wait-for-services.sh
          ./.github/scripts/wait-for-services.sh

      - name: Seed Database
        run: docker compose exec app npm run db:seed
    
      - name: Run Tests
        run: docker compose exec app npm run test:coverage
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/

      - name: SonarQube Scan
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Tear down
        if: always()
        run: docker compose down -v